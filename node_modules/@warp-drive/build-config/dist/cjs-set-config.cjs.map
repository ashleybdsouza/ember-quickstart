{"version":3,"file":"cjs-set-config.cjs","sources":["../src/-private/utils/get-env.ts","../src/deprecation-versions.ts","../src/-private/utils/deprecations.ts","../src/canary-features.ts","../src/-private/utils/features.ts","../src/debugging.ts","../src/index.ts"],"sourcesContent":["export function getEnv() {\n  const { EMBER_ENV, IS_TESTING, EMBER_CLI_TEST_COMMAND, NODE_ENV } = process.env;\n  const PRODUCTION = EMBER_ENV === 'production' || (!EMBER_ENV && NODE_ENV === 'production');\n  const DEBUG = !PRODUCTION;\n  const TESTING = DEBUG || Boolean(EMBER_ENV === 'test' || IS_TESTING || EMBER_CLI_TEST_COMMAND);\n\n  return {\n    TESTING,\n    PRODUCTION,\n    DEBUG,\n  };\n}\n","// ========================\n// FOR CONTRIBUTING AUTHORS\n//\n// Deprecations here should also have guides PR'd to the emberjs deprecation app\n//\n// github: https://github.com/ember-learn/deprecation-app\n// website: https://deprecations.emberjs.com\n//\n// Each deprecation should also be given an associated URL pointing to the\n// relevant guide.\n//\n// URLs should be of the form: https://deprecations.emberjs.com/v<major>.x#toc_<fileName>\n// where <major> is the major version of the deprecation and <fileName> is the\n// name of the markdown file in the guides repo.\n//\n// ========================\n//\n\n/**\n * ## Deprecations\n *\n * EmberData allows users to opt-in and remove code that exists to support deprecated\n * behaviors.\n *\n * If your app has resolved all deprecations present in a given version,\n * you may specify that version as your \"compatibility\" version to remove\n * the code that supported the deprecated behavior from your app.\n *\n * For instance, if a deprecation was introduced in 3.13, and the app specifies\n * 3.13 as its minimum version compatibility, any deprecations introduced before\n * or during 3.13 would be stripped away.\n *\n * An app can use a different version than what it specifies as it's compatibility\n * version. For instance, an App could be using `3.16` while specifying compatibility\n * with `3.12`. This would remove any deprecations that were present in or before `3.12`\n * but keep support for anything deprecated in or above `3.13`.\n *\n * ### Configuring Compatibility\n *\n * To configure your compatibility version, set the `compatWith` to the version you\n * are compatible with on the `emberData` config in your `ember-cli-build.js` file.\n *\n * ```js\n * const { setConfig } = await import('@warp-drive/build-config');\n *\n * let app = new EmberApp(defaults, {});\n *\n * setConfig(app, __dirname, { compatWith: '3.12' });\n * ```\n *\n * Alternatively, individual deprecations can be resolved (and thus have its support stripped)\n * via one of the flag names listed below. For instance, given a flag named `DEPRECATE_FOO_BEHAVIOR`.\n *\n * This capability is interopable with `compatWith`. You may set `compatWith` and then selectively resolve\n * additional deprecations, or set compatWith and selectively un-resolve specific deprecations.\n *\n * Note: EmberData does not test against permutations of deprecations being stripped, our tests run against\n * \"all deprecated code included\" and \"all deprecated code removed\". Unspecified behavior may sometimes occur\n * when removing code for only some deprecations associated to a version number.\n *\n * ```js\n * const { setConfig } = await import('@warp-drive/build-config');\n *\n * let app = new EmberApp(defaults, {});\n *\n * setConfig(app, __dirname, {\n *   deprecations: {\n *     DEPRECATE_FOO_BEHAVIOR: false // set to false to strip this code\n *     DEPRECATE_BAR_BEHAVIOR: true // force to true to not strip this code\n *   }\n * });\n * ```\n *\n * The complete list of which versions specific deprecations will be removed in\n * can be found [here](https://github.com/emberjs/data/blob/main/packages/build-config/src/virtual/deprecation-versions.ts \"List of EmberData Deprecations\")\n *\n * @module @warp-drive/build-config/deprecations\n * @main @warp-drive/build-config/deprecations\n */\n\n/**\n * The following list represents deprecations currently active.\n *\n * Some deprecation flags guard multiple deprecation IDs. All\n * associated IDs are listed.\n *\n * @class CurrentDeprecations\n * @public\n */\nexport const DEPRECATE_CATCH_ALL = '99.0';\n/**\n * **id: ember-data:deprecate-non-strict-types**\n *\n * Currently, EmberData expects that the `type` property associated with\n * a resource follows several conventions.\n *\n * - The `type` property must be a non-empty string\n * - The `type` property must be singular\n * - The `type` property must be dasherized\n *\n * We are deprecating support for types that do not match this pattern\n * in order to unlock future improvements in which we can support `type`\n * being any string of your choosing.\n *\n * The goal is that in the future, you will be able to use any string\n * so long as it matches what your configured cache, identifier generation,\n * and schemas expect.\n *\n * E.G. It will matter not that your string is in a specific format like\n * singular, dasherized, etc. so long as everywhere you refer to the type\n * you use the same string.\n *\n * If using @ember-data/model, there will always be a restriction that the\n * `type` must match the path on disk where the model is defined.\n *\n * e.g. `app/models/foo/bar-bem.js` must have a type of `foo/bar-bem`\n *\n * @property DEPRECATE_NON_STRICT_TYPES\n * @since 5.3\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_NON_STRICT_TYPES = '5.3';\n\n/**\n * **id: ember-data:deprecate-non-strict-id**\n *\n * Currently, EmberData expects that the `id` property associated with\n * a resource is a string.\n *\n * However, for legacy support in many locations we would accept a number\n * which would then immediately be coerced into a string.\n *\n * We are deprecating this legacy support for numeric IDs.\n *\n * The goal is that in the future, you will be able to use any ID format\n * so long as everywhere you refer to the ID you use the same format.\n *\n * However, for identifiers we will always use string IDs and so any\n * custom identifier configuration should provide a string ID.\n *\n * @property DEPRECATE_NON_STRICT_ID\n * @since 5.3\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_NON_STRICT_ID = '5.3';\n\n/**\n * **id: <none yet assigned>**\n *\n * This is a planned deprecation which will trigger when observer or computed\n * chains are used to watch for changes on any EmberData LiveArray, CollectionRecordArray,\n * ManyArray or PromiseManyArray.\n *\n * Support for these chains is currently guarded by the deprecation flag\n * listed here, enabling removal of the behavior if desired.\n *\n * @property DEPRECATE_COMPUTED_CHAINS\n * @since 5.0\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_COMPUTED_CHAINS = '5.0';\n\n/**\n * **id: ember-data:deprecate-legacy-imports**\n *\n * Deprecates when importing from `ember-data/*` instead of `@ember-data/*`\n * in order to prepare for the eventual removal of the legacy `ember-data/*`\n *\n * All imports from `ember-data/*` should be updated to `@ember-data/*`\n * except for `ember-data/store`. When you are using `ember-data` (as opposed to\n * installing the indivudal packages) you should import from `ember-data/store`\n * instead of `@ember-data/store` in order to receive the appropriate configuration\n * of defaults.\n *\n * @property DEPRECATE_LEGACY_IMPORTS\n * @since 5.3\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_LEGACY_IMPORTS = '5.3';\n\n/**\n * **id: ember-data:deprecate-non-unique-collection-payloads**\n *\n * Deprecates when the data for a hasMany relationship contains\n * duplicate identifiers.\n *\n * Previously, relationships would silently de-dupe the data\n * when received, but this behavior is being removed in favor\n * of erroring if the same related record is included multiple\n * times.\n *\n * For instance, in JSON:API the below relationship data would\n * be considered invalid:\n *\n * ```json\n * {\n *  \"data\": {\n *   \"type\": \"article\",\n *    \"id\": \"1\",\n *    \"relationships\": {\n *      \"comments\": {\n *        \"data\": [\n *          { \"type\": \"comment\", \"id\": \"1\" },\n *          { \"type\": \"comment\", \"id\": \"2\" },\n *          { \"type\": \"comment\", \"id\": \"1\" } // duplicate\n *        ]\n *     }\n *  }\n * }\n * ```\n *\n * To resolve this deprecation, either update your server to\n * not include duplicate data, or implement normalization logic\n * in either a request handler or serializer which removes\n * duplicate data from relationship payloads.\n *\n * @property DEPRECATE_NON_UNIQUE_PAYLOADS\n * @since 5.3\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_NON_UNIQUE_PAYLOADS = '5.3';\n\n/**\n * **id: ember-data:deprecate-relationship-remote-update-clearing-local-state**\n *\n * Deprecates when a relationship is updated remotely and the local state\n * is cleared of all changes except for \"new\" records.\n *\n * Instead, any records not present in the new payload will be considered\n * \"removed\" while any records present in the new payload will be considered \"added\".\n *\n * This allows us to \"commit\" local additions and removals, preserving any additions\n * or removals that are not yet reflected in the remote state.\n *\n * For instance, given the following initial state:\n *\n * remote: A, B, C\n * local: add D, E\n *        remove B, C\n * => A, D, E\n *\n *\n * If after an update, the remote state is now A, B, D, F then the new state will be\n *\n * remote: A, B, D, F\n * local: add E\n *        remove B\n * => A, D, E, F\n *\n * Under the old behavior the updated local state would instead have been\n * => A, B, D, F\n *\n * Similarly, if a belongsTo remote State was A while its local state was B,\n * then under the old behavior if the remote state changed to C, the local state\n * would be updated to C. Under the new behavior, the local state would remain B.\n *\n * If the remote state was A while its local state was `null`, then under the old\n * behavior if the remote state changed to C, the local state would be updated to C.\n * Under the new behavior, the local state would remain `null`.\n *\n * Thus the new correct mental model is that the state of the relationship at any point\n * in time is whatever the most recent remote state is, plus any local additions or removals\n * you have made that have not yet been reflected by the remote state.\n *\n * > Note: The old behavior extended to modifying the inverse of a relationship. So if\n * > you had local state not reflected in the new remote state, inverses would be notified\n * > and their state reverted as well when \"resetting\" the relationship.\n * > Under the new behavior, since the local state is preserved the inverses will also\n * > not be reverted.\n *\n * ### Resolving this deprecation\n *\n * Resolving this deprecation can be done individually for each relationship\n * or globally for all relationships.\n *\n * To resolve it globally, set the `DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE`\n * to `false` in ember-cli-build.js\n *\n * ```js\n * const { setConfig } = await import('@warp-drive/build-config');\n *\n * let app = new EmberApp(defaults, {});\n *\n * setConfig(app, __dirname, {\n *   deprecations: {\n *     // set to false to strip the deprecated code (thereby opting into the new behavior)\n *     DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE: false\n *   }\n * });\n * ```\n *\n * To resolve this deprecation on an individual relationship, adjust the `options` passed to\n * the relationship. For relationships with inverses, both sides MUST be migrated to the new\n * behavior at the same time.\n *\n * ```js\n * class Person extends Model {\n *  @hasMany('person', {\n *    async: false,\n *    inverse: null,\n *    resetOnRemoteUpdate: false\n *  }) children;\n *\n *  @belongsTo('person', {\n *    async: false,\n *    inverse: null,\n *    resetOnRemoteUpdate: false\n *  }) parent;\n * }\n * ```\n *\n * > Note: false is the only valid value here, all other values (including missing)\n * > will be treated as true, where `true` is the legacy behavior that is now deprecated.\n *\n * Once you have migrated all relationships, you can remove the the resetOnRemoteUpdate\n * option and set the deprecation flag to false in ember-cli-build.\n *\n * ### What if I don't want the new behavior?\n *\n * EmberData's philosophy is to not make assumptions about your application. Where possible\n * we seek out \"100%\" solutions – solutions that work for all use cases - and where that is\n * not possible we default to \"90%\" solutions – solutions that work for the vast majority of use\n * cases. In the case of \"90%\" solutions we look for primitives that allow you to resolve the\n * 10% case in your application. If no such primitives exist, we provide an escape hatch that\n * ensures you can build the behavior you need without adopting the cost of the default solution.\n *\n * In this case, the old behavior was a \"40%\" solution. The inability for an application developer\n * to determine what changes were made locally, and thus what changes should be preserved, made\n * it impossible to build certain features easily, or in some cases at all. The proliferation of\n * feature requests, bug reports (from folks surprised by the prior behavior) and addon attempts\n * in this space are all evidence of this.\n *\n * We believe the new behavior is a \"90%\" solution. It works for the vast majority of use cases,\n * often without noticeable changes to existing application behavior, and provides primitives that\n * allow you to build the behavior you need for the remaining 10%.\n *\n * The great news is that this behavior defaults to trusting your API similar to the old behavior.\n * If your API is correct, you will not need to make any changes to your application to adopt\n * the new behavior.\n *\n * This means the 10% cases are those where you can't trust your API to provide the correct\n * information. In these cases, because you now have cheap access to a diff of the relationship\n * state, there are a few options that weren't available before:\n *\n * - you can adjust returned API payloads to contain the expected changes that it doesn't include\n * - you can modify local state by adding or removing records on the HasMany record array to remove\n *   any local changes that were not returned by the API.\n * - you can use `<Cache>.mutate(mutation)` to directly modify the local cache state of the relationship\n *   to match the expected state.\n *\n * What this version (5.3) does not yet provide is a way to directly modify the cache's remote state\n * for the relationship via public APIs other than via the broader action of upserting a response via\n * `<Cache>.put(document)`. However, such an API was sketched in the Cache 2.1 RFC\n * `<Cache>.patch(operation)` and is likely to be added in a future 5.x release of EmberData.\n *\n * This version (5.3) also does not yet provide a way to directly modify the graph (a general purpose\n * subset of cache behaviors specific to relationships) via public APIs. However, during the\n * 5.x release series we will be working on finalizing the Graph API and making it public.\n *\n * If none of these options work for you, you can always opt-out more broadly by implementing\n * a custom Cache with the relationship behaviors you need.\n *\n * @property DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\n * @since 5.3\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE = '5.3';\n\n/**\n * **id: ember-data:deprecate-many-array-duplicates**\n *\n * When the flag is `true` (default), adding duplicate records to a `ManyArray`\n * is deprecated in non-production environments. In production environments,\n * duplicate records added to a `ManyArray` will be deduped and no error will\n * be thrown.\n *\n * When the flag is `false`, an error will be thrown when duplicates are added.\n *\n * @property DEPRECATE_MANY_ARRAY_DUPLICATES\n * @since 5.3\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_MANY_ARRAY_DUPLICATES = '5.3';\n\n/**\n * **id: ember-data:deprecate-store-extends-ember-object**\n *\n * When the flag is `true` (default), the Store class will extend from `@ember/object`.\n * When the flag is `false` or `ember-source` is not present, the Store will not extend\n * from EmberObject.\n *\n * @property DEPRECATE_STORE_EXTENDS_EMBER_OBJECT\n * @since 5.4\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_STORE_EXTENDS_EMBER_OBJECT = '5.4';\n\n/**\n * **id: ember-data:schema-service-updates**\n *\n * When the flag is `true` (default), the legacy schema\n * service features will be enabled on the store and\n * the service, and deprecations will be thrown when\n * they are used.\n *\n * Deprecated features include:\n *\n * - `Store.registerSchema` method is deprecated in favor of the `Store.createSchemaService` hook\n * - `Store.registerSchemaDefinitionService` method is deprecated in favor of the `Store.createSchemaService` hook\n * - `Store.getSchemaDefinitionService` method is deprecated in favor of `Store.schema` property\n * - `SchemaService.doesTypeExist` method is deprecated in favor of the `SchemaService.hasResource` method\n * - `SchemaService.attributesDefinitionFor` method is deprecated in favor of the `SchemaService.fields` method\n * - `SchemaService.relationshipsDefinitionFor` method is deprecated in favor of the `SchemaService.fields` method\n *\n * @property ENABLE_LEGACY_SCHEMA_SERVICE\n * @since 5.4\n * @until 6.0\n * @public\n */\nexport const ENABLE_LEGACY_SCHEMA_SERVICE = '5.4';\n\n/**\n * **id: warp-drive.ember-inflector**\n *\n * Deprecates the use of ember-inflector for pluralization and singularization in favor\n * of the `@ember-data/request-utils` package.\n *\n * Rule configuration methods (singular, plural, uncountable, irregular) and\n * usage methods (singularize, pluralize) are are available as imports from\n * `@ember-data/request-utils/string`\n *\n * Notable differences with ember-inflector:\n * - there cannot be multiple inflector instances with separate rules\n * - pluralization does not support a count argument\n * - string caches now default to 10k entries instead of 1k, and this\n *   size is now configurable. Additionally, the cache is now a LRU cache\n *   instead of a first-N cache.\n *\n * This deprecation can be resolved by removing usage of ember-inflector or by using\n * both ember-inflector and @ember-data/request-utils in parallel and updating your\n * EmberData/WarpDrive build config to mark the deprecation as resolved\n * in ember-cli-build\n *\n * ```js\n * setConfig(app, __dirname, { deprecations: { DEPRECATE_EMBER_INFLECTOR: false }});\n * ```\n *\n * @property DEPRECATE_EMBER_INFLECTOR\n * @since 5.3\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_EMBER_INFLECTOR = '5.3';\n","import semver from 'semver';\n\nimport * as CURRENT_DEPRECATIONS from '../../deprecation-versions.ts';\ntype MajorMinor = `${number}.${number}`;\ntype DeprecationFlag = keyof typeof CURRENT_DEPRECATIONS;\n\nfunction deprecationIsResolved(deprecatedSince: MajorMinor, compatVersion: MajorMinor) {\n  return semver.lte(semver.minVersion(deprecatedSince)!, semver.minVersion(compatVersion)!);\n}\n\nexport function getDeprecations(compatVersion: MajorMinor | null | undefined): { [key in DeprecationFlag]: boolean } {\n  const flags = {} as Record<DeprecationFlag, boolean>;\n  const keys = Object.keys(CURRENT_DEPRECATIONS) as DeprecationFlag[];\n\n  keys.forEach((flag) => {\n    const deprecatedSince = CURRENT_DEPRECATIONS[flag];\n    let flagState = true; // default to no code-stripping\n\n    // if we are told we are compatible with a version\n    // we check if we can strip this flag\n    if (compatVersion) {\n      const isResolved = deprecationIsResolved(deprecatedSince, compatVersion);\n      // if we've resolved, we strip (by setting the flag to false)\n      /*\n        if (DEPRECATED_FEATURE) {\n          // deprecated code path\n        } else {\n          // if needed a non-deprecated code path\n        }\n      */\n      flagState = !isResolved;\n    }\n\n    // console.log(`${flag}=${flagState} (${deprecatedSince} <= ${compatVersion})`);\n    flags[flag] = flagState;\n  });\n\n  return flags;\n}\n","/**\n * ## Canary Features\n *\n * EmberData allows users to test features that are implemented but not yet\n * available even in canary.\n *\n * Typically these features represent work that might introduce a new concept,\n * new API, change an API, or risk an unintended change in behavior to consuming\n * applications.\n *\n * Such features have their implementations guarded by a \"feature flag\", and the\n * flag is only activated once the core-data team is prepared to ship the work\n * in a canary release.\n *\n * ### Installing Canary\n *\n * To test a feature you MUST be using a canary build. Canary builds are published\n * to `npm` and can be installed using a precise tag (such as `ember-data@3.16.0-alpha.1`)\n * or by installing the latest dist-tag published to the `canary` channel using your javascript\n * package manager of choice. For instance with [pnpm](https://pnpm.io/)\n\n  ```cli\n  pnpm add ember-data@canary\n  ```\n *\n * ### Activating a Canary Feature\n *\n * Once you have installed canary, feature-flags can be activated at build-time\n *\n * by setting an environment variable:\n *\n * ```cli\n * # Activate a single flag\n * EMBER_DATA_FEATURE_OVERRIDE=SOME_FLAG ember build\n *\n * # Activate multiple flags by separating with commas\n * EMBER_DATA_FEATURE_OVERRIDE=SOME_FLAG,OTHER_FLAG ember build\n *\n * # Activate all flags\n * EMBER_DATA_FEATURE_OVERRIDE=ENABLE_ALL_OPTIONAL ember build\n * ```\n *\n * or by setting the appropriate flag in your `ember-cli-build` file:\n *\n * ```ts\n * let app = new EmberApp(defaults, {\n *   emberData: {\n *     features: {\n *       SAMPLE_FEATURE_FLAG: false // utliize existing behavior, strip code for the new feature\n *       OTHER_FEATURE_FLAG: true // utilize this new feature, strip code for the older behavior\n *     }\n *   }\n * })\n * ```\n *\n * **The \"off\" branch of feature-flagged code is always stripped from production builds.**\n *\n * The list of available feature-flags is located [here](https://github.com/emberjs/data/tree/main/packages/build-config/src/virtual/canary-features.ts \"List of EmberData FeatureFlags\")\n *\n *\n * ### Preparing a Project to use a Canary Feature\n *\n * For most projects, simple version detection should be enough.\n * Using the provided version compatibility helpers from [embroider-macros](https://github.com/embroider-build/embroider/tree/main/packages/macros#readme)\n * the following can be done:\n *\n * ```js\n * if (macroCondition(dependencySatisfies('@ember-data/store', '5.0'))) {\n *   // do thing\n * }\n * ```\n *\n   @module @warp-drive/build-config/canary-features\n   @main @warp-drive/build-config/canary-features\n */\n/**\n  This is the current list of features used at build time for canary releases.\n  If empty there are no features currently gated by feature flags.\n\n  The valid values are:\n\n  - `true` | The feature is **enabled** at all times, and cannot be disabled.\n  - `false` | The feature is **disabled** at all times, and cannot be enabled.\n  - `null` | The feature is **disabled by default**, but can be enabled via configuration.\n\n  @class CanaryFeatureFlags\n  @public\n*/\nexport const SAMPLE_FEATURE_FLAG: boolean | null = null;\n","import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nimport * as CURRENT_FEATURES from '../../canary-features.ts';\ntype FEATURE = keyof typeof CURRENT_FEATURES;\n\nconst dirname = typeof __dirname !== 'undefined' ? __dirname : fileURLToPath(new URL('.', import.meta.url));\nconst relativePkgPath = path.join(dirname, '../package.json');\n\nconst version = JSON.parse(fs.readFileSync(relativePkgPath, 'utf-8')).version;\nconst isCanary = version.includes('alpha');\n\nexport function getFeatures(isProd: boolean): { [key in FEATURE]: boolean } {\n  const features = Object.assign({}, CURRENT_FEATURES) as Record<FEATURE, boolean>;\n  const keys = Object.keys(features) as FEATURE[];\n\n  if (!isCanary) {\n    // disable all features with a current value of `null`\n    for (const feature of keys) {\n      let featureValue = features[feature];\n\n      if (featureValue === null) {\n        features[feature] = false;\n      }\n    }\n    return features;\n  }\n\n  const FEATURE_OVERRIDES = process.env.EMBER_DATA_FEATURE_OVERRIDE;\n  if (FEATURE_OVERRIDES === 'ENABLE_ALL_OPTIONAL') {\n    // enable all features with a current value of `null`\n    for (const feature of keys) {\n      let featureValue = features[feature];\n\n      if (featureValue === null) {\n        features[feature] = true;\n      }\n    }\n  } else if (FEATURE_OVERRIDES === 'DISABLE_ALL') {\n    // disable all features, including those with a value of `true`\n    for (const feature of keys) {\n      features[feature] = false;\n    }\n  } else if (FEATURE_OVERRIDES) {\n    // enable only the specific features listed in the environment\n    // variable (comma separated)\n    const forcedFeatures = FEATURE_OVERRIDES.split(',');\n    for (let i = 0; i < forcedFeatures.length; i++) {\n      let featureName = forcedFeatures[i];\n\n      if (!keys.includes(featureName as FEATURE)) {\n        throw new Error(`Unknown feature flag: ${featureName}`);\n      }\n\n      features[featureName as FEATURE] = true;\n    }\n  }\n\n  if (isProd) {\n    // disable all features with a current value of `null`\n    for (const feature of keys) {\n      let featureValue = features[feature];\n\n      if (featureValue === null) {\n        features[feature] = false;\n      }\n    }\n  }\n\n  return features;\n}\n","/**\n * ## Debugging\n *\n * Many portions of the internals are helpfully instrumented with logging that can be activated\n * at build time. This instrumentation is always removed from production builds or any builds\n * that has not explicitly activated it. To activate it set the appropriate flag to `true`.\n *\n  @module @warp-drive/build-config/debugging\n  @main @warp-drive/build-config/debugging\n */\n/**\n *\n * Many portions of the internals are helpfully instrumented with logging that can be activated\nat build time. This instrumentation is always removed from production builds or any builds\nthat has not explicitly activated it. To activate it set the appropriate flag to `true`.\n\n```ts\n  let app = new EmberApp(defaults, {\n    emberData: {\n      debug: {\n          LOG_PAYLOADS: false, // data store received to update cache with\n          LOG_OPERATIONS: false, // updates to cache remote state\n          LOG_MUTATIONS: false, // updates to cache local state\n          LOG_NOTIFICATIONS: false,\n          LOG_REQUESTS: false,\n          LOG_REQUEST_STATUS: false,\n          LOG_IDENTIFIERS: false,\n          LOG_GRAPH: false,\n          LOG_INSTANCE_CACHE: false,\n      }\n    }\n  });\n  ```\n\n  @class DebugLogging\n  @public\n */\n/**\n * log payloads received by the store\n * via `push` or returned from a delete/update/create\n * operation.\n *\n * @property {boolean} LOG_PAYLOADS\n * @public\n */\nexport const LOG_PAYLOADS: boolean = false;\n/**\n * log remote-state updates to the cache\n *\n * @property {boolean} LOG_OPERATIONS\n * @public\n */\nexport const LOG_OPERATIONS: boolean = false;\n/**\n * log local-state updates to the cache\n *\n * @property {boolean} LOG_MUTATIONS\n * @public\n */\nexport const LOG_MUTATIONS: boolean = false;\n/**\n * log notifications received by the NotificationManager\n *\n * @property {boolean} LOG_NOTIFICATIONS\n * @public\n */\nexport const LOG_NOTIFICATIONS: boolean = false;\n/**\n * log requests issued by the RequestManager\n *\n * @property {boolean} LOG_REQUESTS\n * @public\n */\nexport const LOG_REQUESTS: boolean = false;\n/**\n * log updates to requests the store has issued to\n * the network (adapter) to fulfill.\n *\n * @property {boolean} LOG_REQUEST_STATUS\n * @public\n */\nexport const LOG_REQUEST_STATUS: boolean = false;\n/**\n * log peek, generation and updates to\n * Record Identifiers.\n *\n * @property {boolean} LOG_IDENTIFIERS\n * @public\n */\nexport const LOG_IDENTIFIERS: boolean = false;\n/**\n * log updates received by the graph (relationship pointer storage)\n *\n * @property {boolean} LOG_GRAPH\n * @public\n */\nexport const LOG_GRAPH: boolean = false;\n/**\n * log creation/removal of RecordData and Record\n * instances.\n *\n * @property {boolean} LOG_INSTANCE_CACHE\n * @public\n */\nexport const LOG_INSTANCE_CACHE: boolean = false;\n","import EmbroiderMacros from '@embroider/macros/src/node.js';\nimport { getEnv } from './-private/utils/get-env.ts';\nimport { getDeprecations } from './-private/utils/deprecations.ts';\nimport { getFeatures } from './-private/utils/features.ts';\nimport * as LOGGING from './debugging.ts';\nimport type { MacrosConfig } from '@embroider/macros/src/node.js';\n\nconst _MacrosConfig = EmbroiderMacros.MacrosConfig as unknown as typeof MacrosConfig;\n\ntype LOG_CONFIG_KEY = keyof typeof LOGGING;\n\nexport type WarpDriveConfig = {\n  debug?: Partial<InternalWarpDriveConfig['debug']>;\n  polyfillUUID?: boolean;\n  includeDataAdapterInProduction?: boolean;\n  compatWith?: `${number}.${number}`;\n  deprecations?: Partial<InternalWarpDriveConfig['deprecations']>;\n  features?: Partial<InternalWarpDriveConfig['features']>;\n};\n\ntype InternalWarpDriveConfig = {\n  debug: { [key in LOG_CONFIG_KEY]: boolean };\n  polyfillUUID: boolean;\n  includeDataAdapter: boolean;\n  compatWith: `${number}.${number}` | null;\n  deprecations: ReturnType<typeof getDeprecations>;\n  features: ReturnType<typeof getFeatures>;\n  env: {\n    TESTING: boolean;\n    PRODUCTION: boolean;\n    DEBUG: boolean;\n  };\n};\n\ntype MacrosWithGlobalConfig = Omit<MacrosConfig, 'globalConfig'> & { globalConfig: Record<string, unknown> };\n\nfunction recastMacrosConfig(macros: object): MacrosWithGlobalConfig {\n  if (!('globalConfig' in macros)) {\n    throw new Error('Expected MacrosConfig to have a globalConfig property');\n  }\n  return macros as MacrosWithGlobalConfig;\n}\n\nexport function setConfig(context: object, appRoot: string, config: WarpDriveConfig) {\n  const macros = recastMacrosConfig(_MacrosConfig.for(context, appRoot));\n  const isLegacySupport = (config as unknown as { ___legacy_support?: boolean }).___legacy_support;\n  const hasDeprecatedConfig = isLegacySupport && Object.keys(config).length > 1;\n  const hasInitiatedConfig = macros.globalConfig['WarpDrive'];\n\n  // setConfig called by user prior to legacy support called\n  if (isLegacySupport && hasInitiatedConfig) {\n    if (hasDeprecatedConfig) {\n      throw new Error(\n        'You have provided a config object to setConfig, but are also using the legacy emberData options key in ember-cli-build. Please remove the emberData key from options.'\n      );\n    }\n    return;\n  }\n\n  // legacy support called prior to user setConfig\n  if (isLegacySupport && hasDeprecatedConfig) {\n    console.warn(\n      `You are using the legacy emberData key in your ember-cli-build.js file. This key is deprecated and will be removed in the next major version of EmberData/WarpDrive. Please use \\`import { setConfig } from '@warp-drive/build-config';\\` instead.`\n    );\n  }\n\n  // included hooks run during class initialization of the EmberApp instance\n  // so our hook will run before the user has a chance to call setConfig\n  // else we could print a useful message here\n  // else if (isLegacySupport) {\n  //   console.warn(\n  //     `WarpDrive requires your ember-cli-build file to set a base configuration for the project.\\n\\nUsage:\\n\\t\\`import { setConfig } from '@warp-drive/build-config';\\n\\tsetConfig(app, __dirname, {});\\``\n  //   );\n  // }\n\n  const debugOptions: InternalWarpDriveConfig['debug'] = Object.assign({}, LOGGING, config.debug);\n\n  const env = getEnv();\n  const DEPRECATIONS = getDeprecations(config.compatWith || null);\n  const FEATURES = getFeatures(env.PRODUCTION);\n\n  const includeDataAdapterInProduction =\n    typeof config.includeDataAdapterInProduction === 'boolean' ? config.includeDataAdapterInProduction : true;\n  const includeDataAdapter = env.PRODUCTION ? includeDataAdapterInProduction : true;\n\n  const finalizedConfig: InternalWarpDriveConfig = {\n    debug: debugOptions,\n    polyfillUUID: config.polyfillUUID ?? false,\n    includeDataAdapter,\n    compatWith: config.compatWith ?? null,\n    deprecations: DEPRECATIONS,\n    features: FEATURES,\n    env,\n  };\n\n  macros.setGlobalConfig(import.meta.filename, 'WarpDrive', finalizedConfig);\n}\n"],"names":["getEnv","EMBER_ENV","IS_TESTING","EMBER_CLI_TEST_COMMAND","NODE_ENV","process","env","PRODUCTION","DEBUG","TESTING","Boolean","DEPRECATE_CATCH_ALL","DEPRECATE_NON_STRICT_TYPES","DEPRECATE_NON_STRICT_ID","DEPRECATE_COMPUTED_CHAINS","DEPRECATE_LEGACY_IMPORTS","DEPRECATE_NON_UNIQUE_PAYLOADS","DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE","DEPRECATE_MANY_ARRAY_DUPLICATES","DEPRECATE_STORE_EXTENDS_EMBER_OBJECT","ENABLE_LEGACY_SCHEMA_SERVICE","DEPRECATE_EMBER_INFLECTOR","deprecationIsResolved","deprecatedSince","compatVersion","semver","lte","minVersion","getDeprecations","flags","keys","Object","CURRENT_DEPRECATIONS","forEach","flag","flagState","isResolved","SAMPLE_FEATURE_FLAG","dirname","__dirname","fileURLToPath","relativePkgPath","path","join","version","JSON","parse","fs","readFileSync","isCanary","includes","getFeatures","isProd","features","assign","CURRENT_FEATURES","feature","featureValue","FEATURE_OVERRIDES","EMBER_DATA_FEATURE_OVERRIDE","forcedFeatures","split","i","length","featureName","Error","LOG_PAYLOADS","LOG_OPERATIONS","LOG_MUTATIONS","LOG_NOTIFICATIONS","LOG_REQUESTS","LOG_REQUEST_STATUS","LOG_IDENTIFIERS","LOG_GRAPH","LOG_INSTANCE_CACHE","_MacrosConfig","EmbroiderMacros","MacrosConfig","recastMacrosConfig","macros","setConfig","context","appRoot","config","for","isLegacySupport","___legacy_support","hasDeprecatedConfig","hasInitiatedConfig","globalConfig","console","warn","debugOptions","LOGGING","debug","DEPRECATIONS","compatWith","FEATURES","includeDataAdapterInProduction","includeDataAdapter","finalizedConfig","polyfillUUID","deprecations","setGlobalConfig","import"],"mappings":";;;;;;;;;;;AAAO,SAASA,MAAMA,GAAG;EACvB,MAAM;IAAEC,SAAS;IAAEC,UAAU;IAAEC,sBAAsB;AAAEC,IAAAA,QAAAA;GAAU,GAAGC,OAAO,CAACC,GAAG,CAAA;EAC/E,MAAMC,UAAU,GAAGN,SAAS,KAAK,YAAY,IAAK,CAACA,SAAS,IAAIG,QAAQ,KAAK,YAAa,CAAA;EAC1F,MAAMI,KAAK,GAAG,CAACD,UAAU,CAAA;AACzB,EAAA,MAAME,OAAO,GAAGD,KAAK,IAAIE,OAAO,CAACT,SAAS,KAAK,MAAM,IAAIC,UAAU,IAAIC,sBAAsB,CAAC,CAAA;EAE9F,OAAO;IACLM,OAAO;IACPF,UAAU;AACVC,IAAAA,KAAAA;GACD,CAAA;AACH;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMG,mBAAmB,GAAG,MAAM,CAAA;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,0BAA0B,GAAG,KAAK,CAAA;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,uBAAuB,GAAG,KAAK,CAAA;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,yBAAyB,GAAG,KAAK,CAAA;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,wBAAwB,GAAG,KAAK,CAAA;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,6BAA6B,GAAG,KAAK,CAAA;;AAElyDAAyD,GAAG,KAAK,CAAA;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,+BAA+B,GAAG,KAAK,CAAA;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,oCAAoC,GAAG,KAAK,CAAA;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,4BAA4B,GAAG,KAAK,CAAA;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,yBAAyB,GAAG,KAAK;;;;;;;;;;;;;;;;;ACtc9C,SAASC,qBAAqBA,CAACC,eAA2B,EAAEC,aAAyB,EAAE;AACrF,EAAA,OAAOC,MAAM,CAACC,GAAG,CAACD,MAAM,CAACE,UAAU,CAACJ,eAAe,CAAC,EAAGE,MAAM,CAACE,UAAU,CAACH,aAAa,CAAE,CAAC,CAAA;AAC3F,CAAA;AAEO,SAASI,eAAeA,CAACJ,aAA4C,EAAyC;EACnH,MAAMK,KAAK,GAAG,EAAsC,CAAA;AACpD,EAAA,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACE,oBAAoB,CAAsB,CAAA;AAEnEF,EAAAA,IAAI,CAACG,OAAO,CAAEC,IAAI,IAAK;AACrB,IAAA,MAAMX,eAAe,GAAGS,oBAAoB,CAACE,IAAI,CAAC,CAAA;AAClD,IAAA,IAAIC,SAAS,GAAG,IAAI,CAAC;;AAErB;AACA;AACA,IAAA,IAAIX,aAAa,EAAE;AACjB,MAAA,MAAMY,UAAU,GAAGd,qBAAqB,CAACC,eAAe,EAAEC,aAAa,CAAC,CAAA;AACxE;AACA;AACN;AACA;AACA;AACA;AACA;AACA;MACMW,SAAS,GAAG,CAACC,UAAU,CAAA;AACzB,KAAA;;AAEA;AACAP,IAAAA,KAAK,CAACK,IAAI,CAAC,GAAGC,SAAS,CAAA;AACzB,GAAC,CAAC,CAAA;AAEF,EAAA,OAAON,KAAK,CAAA;AACd;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMQ,mBAAmC,GAAG,IAAI;;;;;;;ACjFvD,MAAMC,OAAO,GAAG,OAAOC,SAAS,KAAK,WAAW,GAAGA,SAAS,GAAGC,iBAAa,CAAC,IAA6B,GAAA,CAAA,GAAA,EAAA,uMAAA,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"}