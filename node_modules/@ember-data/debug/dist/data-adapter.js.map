{"version":3,"file":"data-adapter.js","sources":["../../../node_modules/.pnpm/decorator-transforms@2.0.0_@babel+core@7.24.5/node_modules/decorator-transforms/dist/chunk-3SQBS3Y5.js","../src/data-adapter.ts"],"sourcesContent":["import {\n  __export\n} from \"./chunk-CSAU5B4Q.js\";\n\n// src/runtime.ts\nvar runtime_exports = {};\n__export(runtime_exports, {\n  c: () => decorateClass,\n  f: () => decorateFieldV1,\n  g: () => decorateFieldV2,\n  i: () => initializeDeferredDecorator,\n  m: () => decorateMethodV1,\n  n: () => decorateMethodV2,\n  p: () => decoratePOJO\n});\nvar deferred = /* @__PURE__ */ new WeakMap();\nfunction deferDecorator(proto, prop, desc) {\n  let map = deferred.get(proto);\n  if (!map) {\n    map = /* @__PURE__ */ new Map();\n    deferred.set(proto, map);\n  }\n  map.set(prop, desc);\n}\nfunction findDeferredDecorator(target, prop) {\n  let cursor = target.prototype;\n  while (cursor) {\n    let desc = deferred.get(cursor)?.get(prop);\n    if (desc) {\n      return desc;\n    }\n    cursor = cursor.prototype;\n  }\n}\nfunction decorateFieldV1(target, prop, decorators, initializer) {\n  return decorateFieldV2(target.prototype, prop, decorators, initializer);\n}\nfunction decorateFieldV2(prototype, prop, decorators, initializer) {\n  let desc = {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    initializer: null\n  };\n  if (initializer) {\n    desc.initializer = initializer;\n  }\n  for (let decorator of decorators) {\n    desc = decorator(prototype, prop, desc) || desc;\n  }\n  if (desc.initializer === void 0) {\n    Object.defineProperty(prototype, prop, desc);\n  } else {\n    deferDecorator(prototype, prop, desc);\n  }\n}\nfunction decorateMethodV1({ prototype }, prop, decorators) {\n  return decorateMethodV2(prototype, prop, decorators);\n}\nfunction decorateMethodV2(prototype, prop, decorators) {\n  const origDesc = Object.getOwnPropertyDescriptor(prototype, prop);\n  let desc = { ...origDesc };\n  for (let decorator of decorators) {\n    desc = decorator(prototype, prop, desc) || desc;\n  }\n  if (desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(prototype) : void 0;\n    desc.initializer = void 0;\n  }\n  Object.defineProperty(prototype, prop, desc);\n}\nfunction initializeDeferredDecorator(target, prop) {\n  let desc = findDeferredDecorator(target.constructor, prop);\n  if (desc) {\n    Object.defineProperty(target, prop, {\n      enumerable: desc.enumerable,\n      configurable: desc.configurable,\n      writable: desc.writable,\n      value: desc.initializer ? desc.initializer.call(target) : void 0\n    });\n  }\n}\nfunction decorateClass(target, decorators) {\n  return decorators.reduce(\n    (accum, decorator) => decorator(accum) || accum,\n    target\n  );\n}\nfunction decoratePOJO(pojo, decorated) {\n  for (let [type, prop, decorators] of decorated) {\n    if (type === \"field\") {\n      decoratePojoField(pojo, prop, decorators);\n    } else {\n      decorateMethodV2(pojo, prop, decorators);\n    }\n  }\n  return pojo;\n}\nfunction decoratePojoField(pojo, prop, decorators) {\n  let desc = {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    initializer: () => Object.getOwnPropertyDescriptor(pojo, prop)?.value\n  };\n  for (let decorator of decorators) {\n    desc = decorator(pojo, prop, desc) || desc;\n  }\n  if (desc.initializer) {\n    desc.value = desc.initializer.call(pojo);\n    delete desc.initializer;\n  }\n  Object.defineProperty(pojo, prop, desc);\n}\n\nexport {\n  decorateFieldV1,\n  decorateFieldV2,\n  decorateMethodV1,\n  decorateMethodV2,\n  initializeDeferredDecorator,\n  decorateClass,\n  decoratePOJO,\n  runtime_exports\n};\n//# sourceMappingURL=chunk-3SQBS3Y5.js.map","/**\n  # Overview\n\n  This package provides the `DataAdapter` which the [Ember Inspector](https://github.com/emberjs/ember-inspector)\n  uses to subscribe and retrieve information for the `data` tab in the inspector.\n\n  This package adds roughly .6 KB when minified and compressed to your application in production; however,\n  you can opt out of shipping this addon in production via options in `ember-cli-build.js`\n\n  ```js\n  let app = new EmberApp(defaults, {\n    emberData: {\n      includeDataAdapterInProduction: false\n    }\n  });\n  ```\n\n  When using `ember-data` as a dependency of your app, the default is to ship the inspector support to production.\n\n  When not using `ember-data` as a dependency but instead using EmberData via declaring specific `@ember-data/<package>`\n  dependencies the default is to not ship to production.\n\n  @module @ember-data/debug\n  @main @ember-data/debug\n*/\nimport type { NativeArray } from '@ember/array';\nimport { A } from '@ember/array';\nimport DataAdapter from '@ember/debug/data-adapter';\nimport { addObserver, removeObserver } from '@ember/object/observers';\nimport { inject as service } from '@ember/service';\n\nimport { getGlobalConfig, macroCondition } from '@embroider/macros';\n\nimport type Model from '@ember-data/model';\nimport { capitalize, underscore } from '@ember-data/request-utils/string';\nimport type Store from '@ember-data/store';\nimport { recordIdentifierFor } from '@ember-data/store';\nimport type { ModelSchema } from '@ember-data/store/types';\nimport { assert } from '@warp-drive/build-config/macros';\n\nconst StoreTypesMap = new WeakMap<Store, Map<string, boolean>>();\n\ntype RecordColor = 'black' | 'red' | 'blue' | 'green';\ntype Column = {\n  name: string;\n  desc: string;\n};\ntype WrappedType<N extends string = string> = {\n  name: N;\n  count: number;\n  columns: Column[];\n  object: unknown;\n};\ntype WrappedRecord<T> = {\n  object: T;\n  columnValues: object;\n  searchKeywords: unknown[];\n  filterValues: object;\n  color: RecordColor | null;\n};\ntype WrappedTypeCallback = (types: WrappedType[]) => void;\n\nfunction debugInfo(this: Model) {\n  const relationships: { belongsTo?: []; hasMany?: [] } = {};\n  const expensiveProperties: string[] = [];\n\n  const identifier = recordIdentifierFor(this);\n  const fields = this.store.schema.fields(identifier);\n\n  const attrGroup = {\n    name: 'Attributes',\n    properties: ['id'],\n    expand: true,\n  };\n  const attributes = attrGroup.properties;\n  const groups = [attrGroup];\n\n  for (const field of fields.values()) {\n    switch (field.kind) {\n      case 'attribute':\n        attributes.push(field.name);\n        break;\n      case 'belongsTo':\n      case 'hasMany': {\n        let properties: string[] | undefined = relationships[field.kind];\n\n        if (properties === undefined) {\n          properties = relationships[field.kind] = [];\n          groups.push({\n            name: field.kind,\n            properties,\n            expand: true,\n          });\n        }\n        properties.push(field.name);\n        expensiveProperties.push(field.name);\n        break;\n      }\n    }\n  }\n\n  groups.push({\n    name: 'Flags',\n    properties: ['isLoaded', 'hasDirtyAttributes', 'isSaving', 'isDeleted', 'isError', 'isNew', 'isValid'],\n    expand: false,\n  });\n\n  return {\n    propertyInfo: {\n      // include all other mixins / properties (not just the grouped ones)\n      includeOtherProperties: true,\n      groups: groups,\n      // don't pre-calculate unless cached\n      expensiveProperties: expensiveProperties,\n    },\n  };\n}\n\nfunction installDebugInfo(ModelKlass: typeof Model) {\n  /**\n   Provides info about the model for debugging purposes\n   by grouping the properties into more semantic groups.\n\n   Meant to be used by debugging tools such as the Chrome Ember Extension.\n\n   - Groups all attributes in \"Attributes\" group.\n   - Groups all belongsTo relationships in \"Belongs To\" group.\n   - Groups all hasMany relationships in \"Has Many\" group.\n   - Groups all flags in \"Flags\" group.\n   - Flags relationship CPs as expensive properties.\n\n   @internal\n   */\n  (ModelKlass.prototype as unknown as { _debugInfo: typeof debugInfo })._debugInfo = debugInfo;\n}\n\nfunction typesMapFor(store: Store): Map<string, boolean> {\n  let typesMap = StoreTypesMap.get(store);\n\n  if (typesMap === undefined) {\n    typesMap = new Map();\n    StoreTypesMap.set(store, typesMap);\n  }\n\n  return typesMap;\n}\n\n/**\n  Implements `@ember/debug/data-adapter` with for EmberData\n  integration with the ember-inspector.\n\n  @class InspectorDataAdapter\n  @extends DataAdapter\n  @private\n*/\nclass InspectorDataAdapter extends DataAdapter<Model> {\n  @service('store') declare store: Store;\n\n  /**\n    Specifies how records can be filtered based on the state of the record\n    Records returned will need to have a `filterValues`\n    property with a key for every name in the returned array\n\n    @method getFilters\n    @private\n    @return {Array} List of objects defining filters\n     The object should have a `name` and `desc` property\n  */\n  getFilters() {\n    return [\n      { name: 'isNew', desc: 'New' },\n      { name: 'isModified', desc: 'Modified' },\n      { name: 'isClean', desc: 'Clean' },\n    ];\n  }\n\n  _nameToClass(type: string) {\n    return this.store.modelFor(type);\n  }\n\n  /**\n    Fetch the model types and observe them for changes.\n    Maintains the list of model types without needing the Model package for detection.\n\n    @method watchModelTypes\n    @private\n    @param {Function} typesAdded Callback to call to add types.\n    Takes an array of objects containing wrapped types (returned from `wrapModelType`).\n    @param {Function} typesUpdated Callback to call when a type has changed.\n    Takes an array of objects containing wrapped types.\n    @return {Function} Method to call to remove all observers\n  */\n  watchModelTypes(typesAdded: WrappedTypeCallback, typesUpdated: WrappedTypeCallback) {\n    const { store } = this;\n\n    const discoveredTypes = typesMapFor(store);\n    const unsub = store.notifications.subscribe('resource', (identifier, notificationType) => {\n      if (notificationType === 'added') {\n        this.watchTypeIfUnseen(store, discoveredTypes, identifier.type, typesAdded, typesUpdated, _releaseMethods);\n      }\n    });\n\n    const _releaseMethods = [\n      () => {\n        store.notifications.unsubscribe(unsub);\n      },\n    ];\n\n    Object.keys(store.identifierCache._cache.resourcesByType).forEach((type) => {\n      discoveredTypes.set(type, false);\n    });\n\n    // Add any models that were added during initialization of the app, before the inspector was opened\n    discoveredTypes.forEach((_, type) => {\n      this.watchTypeIfUnseen(store, discoveredTypes, type, typesAdded, typesUpdated, _releaseMethods);\n    });\n\n    const release = () => {\n      _releaseMethods.forEach((fn) => fn());\n      // reset the list so the models can be added if the inspector is re-opened\n      // the entries are set to false instead of removed, since the models still exist in the app\n      // we just need the inspector to become aware of them\n      discoveredTypes.forEach((value, key) => {\n        discoveredTypes.set(key, false);\n      });\n      this.releaseMethods.removeObject(release);\n    };\n    this.releaseMethods.pushObject(release);\n    return release;\n  }\n\n  /**\n   * Loop over the discovered types and use the callbacks from watchModelTypes to notify\n   * the consumer of this adapter about the mdoels.\n   *\n   * @method watchTypeIfUnseen\n   * @param {store} store\n   * @param {Map} discoveredTypes\n   * @param {String} type\n   * @param {Function} typesAdded\n   * @param {Function} typesUpdated\n   * @param {Array} releaseMethods\n   * @private\n   */\n  watchTypeIfUnseen(\n    store: Store,\n    discoveredTypes: Map<string, boolean>,\n    type: string,\n    typesAdded: WrappedTypeCallback,\n    typesUpdated: WrappedTypeCallback,\n    releaseMethods: Array<() => void>\n  ) {\n    if (discoveredTypes.get(type) !== true) {\n      const klass = store.modelFor(type);\n      installDebugInfo(klass as typeof Model);\n      const wrapped = this.wrapModelType(klass, type);\n      releaseMethods.push(this.observeModelType(type, typesUpdated));\n      typesAdded([wrapped]);\n      discoveredTypes.set(type, true);\n    }\n  }\n\n  /**\n    Creates a human readable string used for column headers\n\n    @method columnNameToDesc\n    @private\n    @param {String} name The attribute name\n    @return {String} Human readable string based on the attribute name\n  */\n  columnNameToDesc(name: string) {\n    return capitalize(underscore(name).replace(/_/g, ' ').trim());\n  }\n\n  /**\n    Get the columns for a given model type\n\n    @method columnsForType\n    @private\n    @param {Model} typeClass\n    @return {Array} An array of columns of the following format:\n     name: {String} The name of the column\n     desc: {String} Humanized description (what would show in a table column name)\n  */\n  columnsForType(typeClass: ModelSchema) {\n    const columns = [\n      {\n        name: 'id',\n        desc: 'Id',\n      },\n    ];\n    let count = 0;\n    typeClass.attributes.forEach((meta, name) => {\n      if (count++ > this.attributeLimit) {\n        return false;\n      }\n      const desc = this.columnNameToDesc(name);\n      columns.push({ name: name, desc: desc });\n    });\n    return columns;\n  }\n\n  /**\n    Fetches all loaded records for a given type\n\n    @method getRecords\n    @private\n    @param {Model} modelClass of the record\n    @param {String} modelName of the record\n    @return {Array} An array of Model records\n     This array will be observed for changes,\n     so it should update when new records are added/removed\n  */\n  getRecords(modelClass: ModelSchema, modelName: string) {\n    if (arguments.length < 2) {\n      // Legacy Ember.js < 1.13 support\n      const containerKey = (modelClass as unknown as { _debugContainerKey?: string })._debugContainerKey;\n      if (containerKey) {\n        const match = containerKey.match(/model:(.*)/);\n        if (match !== null) {\n          modelName = match[1];\n        }\n      }\n    }\n    assert('Cannot find model name. Please upgrade to Ember.js >= 1.13 for Ember Inspector support', !!modelName);\n    return this.store.peekAll(modelName) as unknown as NativeArray<Model>;\n  }\n\n  /**\n    Gets the values for each column\n    This is the attribute values for a given record\n\n    @method getRecordColumnValues\n    @private\n    @param {Model} record to get values from\n    @return {Object} Keys should match column names defined by the model type\n  */\n  getRecordColumnValues<T extends Model>(record: T) {\n    let count = 0;\n    const columnValues: Record<string, unknown> = { id: record.id };\n\n    record.eachAttribute((key) => {\n      if (count++ > this.attributeLimit) {\n        return false;\n      }\n      columnValues[key] = record[key as keyof T];\n    });\n    return columnValues;\n  }\n\n  /**\n    Returns keywords to match when searching records\n\n    @method getRecordKeywords\n    @private\n    @param {Model} record\n    @return {Array} Relevant keywords for search based on the record's attribute values\n  */\n  getRecordKeywords<T extends Model>(record: T): NativeArray<unknown> {\n    const keywords: unknown[] = [record.id];\n    const keys = ['id'];\n\n    record.eachAttribute((key) => {\n      keys.push(key);\n      keywords.push(record[key as keyof T]);\n    });\n\n    return A(keywords);\n  }\n\n  /**\n    Returns the values of filters defined by `getFilters`\n    These reflect the state of the record\n\n    @method getRecordFilterValues\n    @private\n    @param {Model} record\n    @return {Object} The record state filter values\n  */\n  getRecordFilterValues(record: Model) {\n    return {\n      isNew: record.isNew,\n      isModified: record.hasDirtyAttributes && !record.isNew,\n      isClean: !record.hasDirtyAttributes,\n    };\n  }\n\n  /**\n    Returns a color that represents the record's state\n    Possible colors: black, blue, green\n\n    @method getRecordColor\n    @private\n    @param {Model} record\n    @return {String} The record color\n  */\n  getRecordColor(record: Model) {\n    let color = 'black';\n    if (record.isNew) {\n      color = 'green';\n    } else if (record.hasDirtyAttributes) {\n      color = 'blue';\n    }\n    return color as RecordColor;\n  }\n\n  /**\n    Observes all relevant properties and re-sends the wrapped record\n    when a change occurs\n\n    @method observeRecord\n    @private\n    @param {Model} record\n    @param {Function} recordUpdated Callback used to notify changes\n    @return {Function} The function to call to remove all observers\n  */\n  observeRecord(record: Model, recordUpdated: (record: WrappedRecord<Model>) => void) {\n    const releaseMethods: Array<() => void> = [];\n    const keysToObserve = ['id', 'isNew', 'hasDirtyAttributes'];\n\n    record.eachAttribute((key: string) => keysToObserve.push(key));\n\n    keysToObserve.forEach((key) => {\n      const handler = () => {\n        recordUpdated(this.wrapRecord(record));\n      };\n      addObserver(record, key, handler);\n      releaseMethods.push(function () {\n        removeObserver(record, key, handler);\n      });\n    });\n\n    const release = function () {\n      releaseMethods.forEach((fn) => fn());\n    };\n\n    return release;\n  }\n}\n\nexport default macroCondition(\n  getGlobalConfig<{ WarpDrive: { includeDataAdapter: boolean } }>().WarpDrive.includeDataAdapter\n)\n  ? InspectorDataAdapter\n  : null;\n"],"names":["runtime_exports","__export","c","decorateClass","f","decorateFieldV1","g","decorateFieldV2","i","initializeDeferredDecorator","m","decorateMethodV1","n","decorateMethodV2","p","decoratePOJO","deferred","WeakMap","deferDecorator","proto","prop","desc","map","get","Map","set","findDeferredDecorator","target","cursor","prototype","decorators","initializer","configurable","enumerable","writable","decorator","Object","defineProperty","origDesc","getOwnPropertyDescriptor","value","call","constructor","reduce","accum","pojo","decorated","type","decoratePojoField","StoreTypesMap","debugInfo","relationships","expensiveProperties","identifier","recordIdentifierFor","fields","store","schema","attrGroup","name","properties","expand","attributes","groups","field","values","kind","push","undefined","propertyInfo","includeOtherProperties","installDebugInfo","ModelKlass","_debugInfo","typesMapFor","typesMap","InspectorDataAdapter","DataAdapter","service","void 0","getFilters","_nameToClass","modelFor","watchModelTypes","typesAdded","typesUpdated","discoveredTypes","unsub","notifications","subscribe","notificationType","watchTypeIfUnseen","_releaseMethods","unsubscribe","keys","identifierCache","_cache","resourcesByType","forEach","_","release","fn","key","releaseMethods","removeObject","pushObject","klass","wrapped","wrapModelType","observeModelType","columnNameToDesc","capitalize","underscore","replace","trim","columnsForType","typeClass","columns","count","meta","attributeLimit","getRecords","modelClass","modelName","arguments","length","containerKey","_debugContainerKey","match","macroCondition","getGlobalConfig","WarpDrive","env","DEBUG","test","Error","peekAll","getRecordColumnValues","record","columnValues","id","eachAttribute","getRecordKeywords","keywords","A","getRecordFilterValues","isNew","isModified","hasDirtyAttributes","isClean","getRecordColor","color","observeRecord","recordUpdated","keysToObserve","handler","wrapRecord","addObserver","removeObserver","includeDataAdapter"],"mappings":"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","x_google_ignoreList":[0]}