import { g as get } from '../../../shared-chunks/cache-gDE3bkXq.js';
export { a9 as ASYNC_OBSERVERS, D as ComputedDescriptor, C as ComputedProperty, ad as DEBUG_INJECTION_FUNCTIONS, a8 as Libraries, Q as PROPERTY_DID_CHANGE, a5 as PROXY_CONTENT, aa as SYNC_OBSERVERS, af as TrackedDescriptor, m as _getPath, a6 as _getProp, ab as activateObserver, V as addArrayObserver, z as addListener, x as addObserver, U as arrayContentDidChange, T as arrayContentWillChange, Y as autoComputed, a1 as beginPropertyChanges, a2 as changeProperties, c as computed, p as defineDecorator, d as defineProperty, o as defineValue, v as descriptorForDecorator, B as descriptorForProperty, a3 as endPropertyChanges, e as expandProperties, ac as flushAsyncObservers, J as hasListeners, H as hasUnknownProperty, f as inject, u as isClassicDecorator, a4 as isComputed, i as isElementDescriptor, M as libraries, w as makeComputedDecorator, ae as markObjectAsDirty, q as nativeDescDecorator, n as notifyPropertyChange, R as objectAt, K as on, W as removeArrayObserver, A as removeListener, y as removeObserver, S as replace, a7 as replaceInNativeArray, r as revalidateObservers, I as sendEvent, L as setClassicDecorator, t as tagForObject, a as tagForProperty, a0 as tracked } from '../../../shared-chunks/cache-gDE3bkXq.js';
export { g as getCachedValueFor } from '../../../shared-chunks/computed_cache-DmYKevAP.js';
export { a as alias } from '../../../shared-chunks/alias-By_2yu5c.js';
import { d as deprecate } from '../../../shared-chunks/index-DTxy4Zgx.js';
import { s as set } from '../../../shared-chunks/property_set-CW4q-uo4.js';
export { _ as _setProp, t as trySet } from '../../../shared-chunks/property_set-CW4q-uo4.js';
import { isDevelopingApp } from '@embroider/macros';
export { g as getProperties, s as setProperties } from '../../../shared-chunks/set_properties-DvalyQdu.js';
export { cached } from '../../../@glimmer/tracking/index.js';
export { createCache, getValue, isConst } from '../../../@glimmer/validator/index.js';
export { N as NAMESPACES, a as NAMESPACES_BY_ID, b as addNamespace, f as findNamespace, c as findNamespaces, i as isNamespaceSearchDisabled, p as processAllNamespaces, d as processNamespace, r as removeNamespace, e as setNamespaceSearchDisabled, s as setUnprocessedMixins } from '../../../shared-chunks/namespace_search-CBgHTkDh.js';

/**
@module ember
*/

function deprecateProperty(object, deprecatedKey, newKey, options) {
  function _deprecate() {
    (isDevelopingApp() && !(false) && deprecate(`Usage of \`${deprecatedKey}\` is deprecated, use \`${newKey}\` instead.`, false, options));
  }
  Object.defineProperty(object, deprecatedKey, {
    configurable: true,
    enumerable: false,
    set(value) {
      _deprecate();
      set(this, newKey, value);
    },
    get() {
      _deprecate();
      return get(this, newKey);
    }
  });
}

const EACH_PROXIES = new WeakMap();
function eachProxyArrayWillChange(array, idx, removedCnt, addedCnt) {
  let eachProxy = EACH_PROXIES.get(array);
  if (eachProxy !== undefined) {
    eachProxy.arrayWillChange(array, idx, removedCnt, addedCnt);
  }
}
function eachProxyArrayDidChange(array, idx, removedCnt, addedCnt) {
  let eachProxy = EACH_PROXIES.get(array);
  if (eachProxy !== undefined) {
    eachProxy.arrayDidChange(array, idx, removedCnt, addedCnt);
  }
}

export { deprecateProperty, eachProxyArrayDidChange, eachProxyArrayWillChange, get, set };
