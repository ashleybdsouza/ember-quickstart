import '../../../shared-chunks/index-PYiGj1jp.js';
import { a as assert } from '../../../shared-chunks/index-DTxy4Zgx.js';
import { j as EmberRouter } from '../../../shared-chunks/index-BXPoca1S.js';
import { isDevelopingApp } from '@embroider/macros';
import { g as get } from '../../../shared-chunks/cache-gDE3bkXq.js';
import '../../../@ember/-internals/meta/lib/meta.js';
import '../../../shared-chunks/mandatory-setter-1UQhiJOb.js';
import '../../../@glimmer/destroyable/index.js';
import '../../../@glimmer/validator/index.js';
import '../../../@glimmer/manager/index.js';
import '../../../shared-chunks/env-BJLX2Arx.js';

/**
@module ember
*/
function currentURL(app) {
  (isDevelopingApp() && !(app.__container__) && assert('[BUG] app.__container__ is not set', app.__container__));
  let router = app.__container__.lookup('router:main');
  (isDevelopingApp() && !(router instanceof EmberRouter) && assert('[BUG] router:main is not a Router', router instanceof EmberRouter));
  let location = get(router, 'location');
  (isDevelopingApp() && !(typeof location !== 'string') && assert('[BUG] location is still a string', typeof location !== 'string'));
  return location.getURL();
}

export { currentURL as default };
